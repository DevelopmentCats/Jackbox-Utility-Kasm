name: "üê≥ Docker Build & Publish"

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*.*.*' ]
  repository_dispatch:
    types: [rebuild-image]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/developmentcats/jackbox-utility-kasm

jobs:
  test:
    name: "üß™ Run Tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.version.outputs.version }}
      utility_version: ${{ steps.utility_version.outputs.utility_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get JackboxUtility Version
        id: utility_version
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            VERSION="${{ github.event.client_payload.version }}"
          else
            # Get latest stable release (not prerelease/beta)
            VERSION=$(curl -sL https://api.github.com/repos/JackboxUtility/JackboxUtility/releases | jq -r '.[] | select(.prerelease == false) | .tag_name' | head -1)
          fi
          echo "utility_version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Found JackboxUtility version: ${VERSION}"

      - name: Set Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            VERSION="${{ github.event.client_payload.version }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Use the JackboxUtility version as our version
            VERSION="${{ steps.utility_version.outputs.utility_version }}"
          fi
          # Clean version string to be Docker compatible (replace + with -)
          CLEAN_VERSION=$(echo "$VERSION" | tr '+' '-' | tr '[:upper:]' '[:lower:]')
          echo "version=${CLEAN_VERSION}" >> "$GITHUB_OUTPUT"
          echo "Set Docker image version to: ${CLEAN_VERSION}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true
          tags: ghcr.io/developmentcats/jackbox-utility-kasm-test:${{ steps.version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            maintainer=${{ github.actor }}
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.utility.version=${{ steps.utility_version.outputs.utility_version }}

      - name: Run Critical Tests
        run: |
          echo "Starting container for critical tests..."
          docker run -d --name jackbox-utility \
            ghcr.io/developmentcats/jackbox-utility-kasm-test:${{ steps.version.outputs.version }}

          # Wait for container to start (max 30 seconds)
          for i in {1..6}; do
            if docker ps -a --filter "name=jackbox-utility" --format "{{.Status}}" | grep -q "Up"; then
              echo "‚úÖ Container started successfully"
              break
            fi
            if [ $i -eq 6 ]; then
              echo "‚ùå Container failed to start"
              docker logs jackbox-utility
              exit 1
            fi
            echo "Waiting for container... (attempt $i/6)"
            sleep 5
          done

          echo "Verifying critical components..."
          
          # Check if JackboxUtility executable exists
          if ! docker exec jackbox-utility test -f /opt/jackbox-utility/JackboxUtility; then
            echo "‚ùå JackboxUtility executable not found"
            exit 1
          fi
          echo "‚úÖ JackboxUtility executable present"

          # Check if desktop entry exists
          if ! docker exec jackbox-utility test -f /usr/share/applications/jackbox-utility.desktop; then
            echo "‚ùå Desktop entry not found"
            exit 1
          fi
          echo "‚úÖ Desktop entry exists"

          # Check for critical system dependencies
          echo "Checking system dependencies..."
          DEPS=("wget" "unzip")
          for dep in "${DEPS[@]}"; do
            if ! docker exec jackbox-utility which $dep > /dev/null 2>&1; then
              echo "‚ùå Required dependency '$dep' not found"
              exit 1
            fi
          done
          echo "‚úÖ All required system dependencies present"
          
          echo "‚úÖ All critical tests passed"

  publish:
    name: "üì¶ Build & Push Image"
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.test.outputs.version }}
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
            type=ref,event=tag
          labels: |
            org.opencontainers.image.title=JackboxUtility Kasm Workspace
            org.opencontainers.image.description=JackboxUtility client as KASM workspace - version ${{ needs.test.outputs.utility_version }}
            org.opencontainers.image.version=${{ needs.test.outputs.version }}
            org.opencontainers.image.utility.version=${{ needs.test.outputs.utility_version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.licenses=GPL-3.0

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max 